import{ag as w}from"./CWDDWP1o.js";import{l as p}from"./DpvYrElx.js";const m=!0,e=m;class S{static async getScripts(){try{const s=`/scripts.${e?w(p):"en"}.json`;try{const r=await fetch(s);if(!r.ok)throw new Error(`无法加载语言特定脚本文件: ${r.status}`);return(await r.json()).scripts.map((a,o)=>{const c=e?window.location.origin:"",l=`curl -fsSL ${a.url.startsWith("http")?a.url:`${c}/installs/${a.url}`} | bash`;return{...a,id:`script-${o}`,command:a.command||l}})}catch(r){return console.warn("加载语言特定脚本文件失败，尝试使用默认脚本文件:",r),(await(await fetch("/scripts.json")).json()).scripts.map((o,c)=>{const i=e?window.location.origin:"",u=`curl -fsSL ${o.url.startsWith("http")?o.url:`${i}/installs/${o.url}`} | bash`;return{...o,id:`script-${c}`,command:o.command||u}})}}catch(t){throw console.error("加载脚本数据失败:",t),new Error("加载脚本数据失败")}}static async getScript(t){try{const s=await this.getScripts(),r=this.findScriptById(s,t);if(!r)throw new Error(`Script with ID ${t} not found`);return r}catch(s){throw console.error(`加载脚本 ${t} 失败:`,s),new Error(`加载脚本 ${t} 失败`)}}static findScriptById(t,s){return t.find(r=>r.id===s)}static searchScripts(t,s){if(!s)return t;const r=s.toLowerCase();return t.filter(n=>n.name.toLowerCase().includes(r)||n.description.toLowerCase().includes(r))}}export{S,e as b};
